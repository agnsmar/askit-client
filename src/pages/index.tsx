/* eslint-disable @typescript-eslint/no-misused-promises */

import { type NextPage } from "next";
import { useState } from "react";
import Head from "next/head";
import ChatMessage from "~/components/ChatMessage";

export interface ChatCompletionRequestMessage {
  id: number;
  role: string;
  content: string;
}

interface chatResponse {
  role: string,
  content: string
}

const Home: NextPage = () => {
  // ðŸ‘‡track form state
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState<ChatCompletionRequestMessage[]>([]);

  const handleSubmit = async (
    e: React.FormEvent<HTMLFormElement>
  ): Promise<void> => {
    e.preventDefault();
    // ðŸ‘‡ encode the data to application/x-www-form-urlencoded type
    let tempMessages = [
      ...messages,
      { id: messages.length + 1, role: "user", content: message },
    ]
    setMessages(tempMessages);
    setMessage("");

    // ðŸ‘‡ call backend endpoint using fetch api
    await fetch("/api/chat", {
      body: JSON.stringify(tempMessages),
      method: "post",
      headers: {
        "content-type": "application/json",
      },
    }).then(async (result) => {
      const answer = await result.json() as chatResponse
      console.log(answer)

      tempMessages = [
        ...tempMessages,
        { id: tempMessages.length + 1, role: answer.role, content: answer.content }
      ]

      setMessages(tempMessages)
    });
  };

  return (
    <>
      <Head>
        <title>AskIT</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="flex h-full w-full flex-col items-center gap-2 px-8 pt-4">
          <h1 className="self-center font-black text-white">AskIT</h1>
          <h6 className="self-center italic text-white">
            Powered by gpt-3.5-turbo
          </h6>

          <div className="h-full w-[700px] min-w-max max-w-[800px] shrink justify-end rounded-md border-2 border-solid border-gray-500 bg-slate-800">
            <div className="flex h-[500px] flex-col gap-4 overflow-y-auto p-4">
              <ChatMessage
                id={0}
                role="assistant"
                content="Hejsan! Vad kan jag hjÃ¤lpa dig med idag?"
              />

              {messages.map(({ id, role, content }) => (
                <ChatMessage key={id} id={id} role={role} content={content} />
              ))}
            </div>

            <div className="h-auto w-full place-self-end bg-slate-700">
              <form action="/api/recieve" onSubmit={handleSubmit}>
                <div className="no-wrap flex p-2">
                  <textarea
                    tabIndex={0}
                    className="normal-whitespace h-20 w-full max-w-full grow resize-none break-words rounded-md bg-slate-100 p-2"
                    name="message"
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    required
                  />

                  <button
                    className="ml-2 h-10 shrink-0 grow-0 rounded-md bg-gray-500 pl-3 pr-3"
                    type="submit"
                  >
                    Send
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
